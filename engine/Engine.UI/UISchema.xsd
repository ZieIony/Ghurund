<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="UISchema"
    targetNamespace="https://github.com/Zielony/Ghurund/Engine/UISchema.xsd"
    elementFormDefault="qualified"
    xmlns="https://github.com/Zielony/Ghurund/Engine/UISchema.xsd"
    xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<xs:element name="layout">
		<xs:complexType>
			<xs:sequence>
				<xs:choice minOccurs="1" maxOccurs="unbounded">
					<xs:element ref="TextBlock"/>
					<xs:element ref="ImageView"/>
					<xs:element ref="Clip"/>
					<xs:element ref="Border"/>
					<xs:element ref="Shadow"/>
					<xs:element ref="Space"/>
					<xs:element ref="ColorView"/>
					<xs:element ref="PaddingContainer"/>
					<xs:element ref="ScrollView"/>
					<xs:element ref="ClickResponseView"/>
					<xs:element ref="StateIndicator"/>
					<xs:element ref="ClickableControl"/>
					<xs:element ref="SelectableView"/>

					<xs:element ref="LinearLayout"/>
					<xs:element ref="StackLayout"/>
					<xs:element ref="ManualLayout"/>
					<xs:element ref="ControlContainer"/>
					<xs:element ref="RecyclerView"/>

					<xs:element ref="CheckBox"/>
					<xs:element ref="RadioButton"/>
					<xs:element ref="Button"/>
					<xs:element ref="VerticalScrollBar"/>
					<xs:element ref="TextView"/>
					<xs:element ref="TextField"/>
					<xs:element ref="TreeView"/>
					<xs:element ref="Toolbar"/>
					<xs:element ref="PropertyList"/>
					<xs:element ref="TabContainer"/>

					<xs:element ref="include"/>
				</xs:choice>
			</xs:sequence>
			<xs:attribute name="data" type="xs:string"/>
			<xs:attribute name="source" type="xs:string"/>
			<xs:attribute name="namespace" type="xs:string"/>
		</xs:complexType>
	</xs:element>

	<!-- attributes -->

	<xs:simpleType name="boolRef">
		<xs:annotation>
			<xs:documentation>
				'true', 'false', or a property name preceded with a dot ('.').
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="true|false|\.[a-zA-Z_]+"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="EventHandler">
		<xs:annotation>
			<xs:documentation>
				A property name preceded with a plus ('+').
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="\+[a-zA-Z_]+"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="PixelsOrPercent">
		<xs:annotation>
			<xs:documentation>
				A float with an optional '%' sign.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="\d+(\.\d+)?\%?"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="Size">
		<xs:annotation>
			<xs:documentation>
				A pair of float values for width and height.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="(\d+(\.\d+)?), *(\d+(\.\d+)?)"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="PreferredSize">
		<xs:annotation>
			<xs:documentation>
				A pair of values for preferred width and height. Each of these values can be either a float,
				a string 'wrap', or a string 'fill'.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="((\d+(\.\d+)?)|(wrap)|(fill)), *((\d+(\.\d+)?)|(wrap)|(fill))"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="Alignment">
		<xs:annotation>
			<xs:documentation>
				A pair of values for horizontal and vertical alignment: 'left', 'center', 'right'
				and 'top', 'center', 'bottom'.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="((left)|(center)|(right)), *((top)|(center)|(bottom))"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="Orientation">
		<xs:annotation>
			<xs:documentation>
				Content orientation: 'horizontal' or 'vertical'.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="(horizontal)|(vertical)"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="ScaleMode">
		<xs:annotation>
			<xs:documentation>
				Can be one of the following: none, stretch, fit, crop.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="none|stretch|fit|crop"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="Shape">
		<xs:annotation>
			<xs:documentation>
				Can be one of the following: 'rect', 'roundRect,[radius]'.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="rect|roundRect(, *(\d+(\.\d+)?))?"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="Color">
		<xs:restriction base="xs:string">
			<xs:pattern value="theme:\/\/color\/.*|#(([0-9]|[a-f]){8})"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="TextFormat">
		<xs:restriction base="xs:string">
			<xs:pattern value="theme:\/\/.*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="Style">
		<xs:restriction base="xs:string">
			<xs:pattern value="theme:\/\/style\/.*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="Layout">
		<xs:restriction base="xs:string">
			<xs:pattern value="file:\/\/.*|lib:\/\/.*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="Image">
		<xs:restriction base="xs:string">
			<xs:pattern value="theme:\/\/image\/.*|file:\/\/.*|lib:\/\/.*"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="Padding">
		<xs:annotation>
			<xs:documentation>
				A positive float to set all padding values, two to set horizontal and vertical,
				and four to set left, top, right and bottom.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="(-?\d+(?:\.\d+)?)(?:, *(-?\d+(?:\.\d+)?)(?:, *(-?\d+(?:\.\d+)?), *(-?\d+(?:\.\d+)?))?)?"/>
		</xs:restriction>
	</xs:simpleType>

	<xs:complexType name="include">
		<xs:attribute name="layout" type="Layout"/>
	</xs:complexType>
	<xs:element name="include" type="include"/>

	<!-- base controls -->

	<xs:complexType name="Control">
		<xs:attribute name="name" type="xs:string"/>
		<xs:attribute name="enabled" type="boolRef"/>
		<xs:attribute name="visible" type="boolRef"/>
		<xs:attribute name="focusable" type="boolRef"/>
		<xs:attribute name="minSize" type="Size"/>
		<xs:attribute name="preferredSize" type="PreferredSize"/>
		<xs:attribute name="style" type="Style"/>
	</xs:complexType>
	<xs:element name="Control" type="Control"/>

	<xs:complexType name="ControlContainer">
		<xs:complexContent>
			<xs:extension base="Control">
				<xs:sequence>
					<xs:choice minOccurs="0">
						<xs:element ref="TextBlock"/>
						<xs:element ref="ImageView"/>
						<xs:element ref="Clip"/>
						<xs:element ref="Border"/>
						<xs:element ref="Shadow"/>
						<xs:element ref="Space"/>
						<xs:element ref="ColorView"/>
						<xs:element ref="PaddingContainer"/>
						<xs:element ref="ScrollView"/>
						<xs:element ref="ClickResponseView"/>
						<xs:element ref="StateIndicator"/>
						<xs:element ref="ClickableControl"/>
						<xs:element ref="SelectableView"/>

						<xs:element ref="LinearLayout"/>
						<xs:element ref="StackLayout"/>
						<xs:element ref="ManualLayout"/>
						<xs:element ref="ControlContainer"/>
						<xs:element ref="RecyclerView"/>

						<xs:element ref="CheckBox"/>
						<xs:element ref="RadioButton"/>
						<xs:element ref="Button"/>
						<xs:element ref="VerticalScrollBar"/>
						<xs:element ref="TextView"/>
						<xs:element ref="TextField"/>
						<xs:element ref="TreeView"/>
						<xs:element ref="Toolbar"/>
						<xs:element ref="PropertyList"/>
						<xs:element ref="TabContainer"/>

						<xs:element ref="include"/>
					</xs:choice>
				</xs:sequence>
				<xs:attribute name="child" type="xs:string"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ControlContainer" type="ControlContainer"/>

	<xs:complexType name="ControlGroup">
		<xs:complexContent>
			<xs:extension base="Control">
				<xs:sequence>
					<xs:sequence>
						<xs:choice minOccurs="0" maxOccurs="unbounded">
							<xs:element ref="TextBlock"/>
							<xs:element ref="ImageView"/>
							<xs:element ref="Clip"/>
							<xs:element ref="Border"/>
							<xs:element ref="Shadow"/>
							<xs:element ref="Space"/>
							<xs:element ref="ColorView"/>
							<xs:element ref="PaddingContainer"/>
							<xs:element ref="ScrollView"/>
							<xs:element ref="ClickResponseView"/>
							<xs:element ref="StateIndicator"/>
							<xs:element ref="ClickableControl"/>
							<xs:element ref="SelectableView"/>

							<xs:element ref="LinearLayout"/>
							<xs:element ref="StackLayout"/>
							<xs:element ref="ManualLayout"/>
							<xs:element ref="ControlContainer"/>
							<xs:element ref="RecyclerView"/>

							<xs:element ref="CheckBox"/>
							<xs:element ref="RadioButton"/>
							<xs:element ref="Button"/>
							<xs:element ref="VerticalScrollBar"/>
							<xs:element ref="TextView"/>
							<xs:element ref="TextField"/>
							<xs:element ref="TreeView"/>
							<xs:element ref="Toolbar"/>
							<xs:element ref="PropertyList"/>
							<xs:element ref="TabContainer"/>

							<xs:element ref="include"/>
						</xs:choice>
					</xs:sequence>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ControlGroup" type="ControlGroup"/>

	<!-- controls and widgets -->

	<xs:complexType name="TextBlock">
		<xs:complexContent>
			<xs:extension base="Control">
				<xs:attribute name="text" type="xs:string"/>
				<xs:attribute name="textColor" type="Color"/>
				<xs:attribute name="textFormat" type="TextFormat"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="TextBlock" type="TextBlock"/>

	<xs:complexType name="ImageView">
		<xs:complexContent>
			<xs:extension base="Control">
				<xs:attribute name="image" type="Image"/>
				<xs:attribute name="imageTint" type="Color"/>
				<xs:attribute name="scaleMode" type="ScaleMode"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ImageView" type="ImageView"/>

	<xs:complexType name="Clip">
		<xs:complexContent>
			<xs:extension base="ControlContainer">
				<xs:attribute name="shape" type="Shape"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Clip" type="Clip"/>

	<xs:complexType name="Border">
		<xs:complexContent>
			<xs:extension base="Control">
				<xs:attribute name="shape" type="Shape"/>
				<xs:attribute name="color" type="Color"/>
				<xs:attribute name="thickness" type="xs:float"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Border" type="Border"/>

	<xs:complexType name="Shadow">
		<xs:complexContent>
			<xs:extension base="Control">
				<xs:attribute name="shape" type="Shape"/>
				<xs:attribute name="color" type="Color"/>
				<xs:attribute name="radius" type="xs:float"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Shadow" type="Shadow"/>

	<xs:complexType name="Space">
		<xs:complexContent>
			<xs:extension base="Control"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Space" type="Space"/>

	<xs:complexType name="ColorView">
		<xs:complexContent>
			<xs:extension base="Control">
				<xs:attribute name="color" type="Color"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ColorView" type="ColorView"/>

	<xs:complexType name="StateIndicator">
		<xs:complexContent>
			<xs:extension base="ColorView"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="StateIndicator" type="StateIndicator"/>

	<xs:complexType name="LinearLayout">
		<xs:complexContent>
			<xs:extension base="ControlGroup">
				<xs:attribute name="orientation" type="Orientation"/>
				<xs:attribute name="alignment" type="Alignment"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="LinearLayout" type="LinearLayout"/>

	<xs:complexType name="StackLayout">
		<xs:complexContent>
			<xs:extension base="ControlGroup">
				<xs:attribute name="alignment" type="Alignment"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="StackLayout" type="StackLayout"/>

	<xs:complexType name="ManualLayout">
		<xs:complexContent>
			<xs:extension base="ControlGroup">
				<xs:attribute name="alignment" type="Alignment"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ManualLayout" type="ManualLayout"/>

	<xs:complexType name="RecyclerView">
		<xs:complexContent>
			<xs:extension base="Control"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="RecyclerView" type="RecyclerView"/>

	<xs:complexType name="PaddingContainer">
		<xs:complexContent>
			<xs:extension base="ControlContainer">
				<xs:attribute name="padding" type="Padding"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="PaddingContainer" type="PaddingContainer"/>

	<xs:complexType name="ScrollView">
		<xs:complexContent>
			<xs:extension base="ControlContainer"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ScrollView" type="ScrollView"/>

	<xs:complexType name="ClickResponseView">
		<xs:complexContent>
			<xs:extension base="Control">
				<xs:attribute name="color" type="Color"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ClickResponseView" type="ClickResponseView"/>

	<xs:complexType name="ClickableControl">
		<xs:complexContent>
			<xs:extension base="ControlContainer"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="ClickableControl" type="ClickableControl"/>

	<xs:complexType name="SelectableView">
		<xs:complexContent>
			<xs:extension base="ClickableControl"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="SelectableView" type="SelectableView"/>

	<xs:complexType name="Widget">
		<xs:complexContent>
			<xs:extension base="Control">
				<xs:attribute name="layout" type="Layout"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="ContentWidget">
		<xs:complexContent>
			<xs:extension base="ControlContainer">
				<xs:attribute name="style" type="Style"/>
				<xs:attribute name="layout" type="Layout"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>

	<xs:complexType name="CheckBox">
		<xs:complexContent>
			<xs:extension base="ContentWidget">
				<xs:attribute name="checked" type="boolRef"/>
				<xs:attribute name="checkedChanged" type="EventHandler"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="CheckBox" type="CheckBox"/>

	<xs:complexType name="RadioButton">
		<xs:complexContent>
			<xs:extension base="ContentWidget">
				<xs:attribute name="checked" type="boolRef"/>
				<xs:attribute name="checkedChanged" type="EventHandler"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="RadioButton" type="RadioButton"/>

	<xs:complexType name="Button">
		<xs:complexContent>
			<xs:extension base="ContentWidget"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Button" type="Button"/>

	<xs:complexType name="VerticalScrollBar">
		<xs:complexContent>
			<xs:extension base="Widget"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="VerticalScrollBar" type="VerticalScrollBar"/>

	<xs:complexType name="TextView">
		<xs:complexContent>
			<xs:extension base="TextBlock"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="TextView" type="TextView"/>

	<xs:complexType name="TextField">
		<xs:complexContent>
			<xs:extension base="TextView"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="TextField" type="TextField"/>

	<xs:complexType name="Toolbar">
		<xs:complexContent>
			<xs:extension base="ControlContainer"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="Toolbar" type="Toolbar"/>

	<xs:complexType name="TreeView">
		<xs:complexContent>
			<xs:extension base="ControlContainer"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="TreeView" type="TreeView"/>

	<xs:complexType name="PropertyList">
		<xs:complexContent>
			<xs:extension base="ControlContainer"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="PropertyList" type="PropertyList"/>

	<xs:complexType name="TabContainer">
		<xs:complexContent>
			<xs:extension base="ContentWidget">
				<xs:attribute name="tabLayout" type="Layout"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="TabContainer" type="TabContainer"/>

	<!-- other -->

	<xs:complexType name="Guide">
		<xs:attribute name="side" type="xs:string"/>
		<xs:attribute name="value" type="PixelsOrPercent"/>
	</xs:complexType>
	<xs:element name="Guide" type="Guide"/>

</xs:schema>
